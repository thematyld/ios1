#!/bin/bash
POSIXLY_CORRECT=yes
ed=""
file=""
date=""
directory=""

#---------------Error----------------#
error () {
   echo "$1" >&2
   exit	-1
}


#-------------------------------------WEDI_RC---Variable----------------------#

# If non initialize variable WEDI_RC 
if [[ -z "${WEDI_RC}" ]]; then 
   error "WEDI_RC hasn't path..."
elif [ ! -e "${WEDI_RC}" ]; then	# If not exist path $WEDI_RC
   echo "WEDI_RC has set path, but invalid...Creating path.." >&2
   x="`dirname $WEDI_RC`"
   if [ ! -d $x ]; then   #If file without last word doesn't exist and it's folder
      mkdir $x
      touch $x/${WEDI_RC##*/}
   else
      touch $x/${WEDI_RC##*/} 
   fi
fi

#-----------------Choose--file------------------
choose_file () {                               
  if [ -d ${1} ]; then
	echo "ANO"
     str=$(grep -Eo '^\s*\S+\/' $WEDI_RC)  
	   #  count=$(grep -w "$directory" "$str" )
	     echo "count: $count"
     echo "str:$str"
  else
     error "NONE file for editing!!"
  fi

}

#----------------Initialize---------------
if [ $# -eq 0 ]; then
   directory=`pwd`
   choose_file $directory
fi
[ $# -ge 4 ] && error "Too many parameters!!"


#---------------------EDITOR---CONFIGURATION----------------#

if [ ! -z "${EDITOR}" ]; then
  ed=$EDITOR
elif [ ! -z "$VISUAL" ]; then 
  ed=$VISUAL
else
  ed=vi
fi


#-----------------Read------
read_textfile () {
   while IFS='' read -r line; do
	items=$(echo $line | tr " " "\n")
	i=0
	for item in $items ; do
	   echo $item
	   ((i++))
	done
   done < "$1"

}

#-------------Append--------
append_log () {
 if [ -s $1 ]; then 		#if $1 is not empty
     echo $str >> $WEDI_RC
   else
     echo $str > $WEDI_RC
 fi
}

#---------------Write--WEDI_RC---Configuration-------
write_log () {		#if WEDI_RC contains the same file
if grep -qi `readlink -f $1` $WEDI_RC ; then
   tmp=$(grep -n `readlink -f $1` $WEDI_RC)  	#Full record
   numLine=`echo $tmp | grep -o -E '^\s*[0-9]+'` #Number line
   cntGrep=${tmp##* }				#Count edit
   ((cntGrep++))
   sed -i "$((numLine))d" $WEDI_RC 
   str="`readlink -f ${1}` `date "+%y%m%d"` ${cntGrep}" #New record
   append_log $str
else
   str="`readlink -f ${1}` `date "+%y%m%d"` 1"
   append_log $str
fi
}

#------------------Function--Open-file-------
open_file_editor () { 
   if [ -f $file ]; then
      $ed $file
      write_log $file 
   else
      error "File didn't exist !!"
   fi
}

#----------------Directory--listing---------
dir_listing () {
   if grep -qi $1 $WEDI_RC ; then
      s=$(grep -n `readlink -f $1` $WEDI_RC)
      echo "$s"
   else
      error "None of the files wasn't edit..."
   fi  
}

#----------------Choose--file--most--often-----
choose_often () {
   echo " Urpav"



}

#-------------------
par_EQ1 () {
  if [ -f ${arg1} ]; then
     file=${arg1}
     open_file_editor
  elif [ -d $arg1 ]; then
     directory=$arg1
     choose_file $directory
  else
     case ${arg1} in
       -m) directory=`pwd`
	   choose_file $directory
	   ;;
       -l) directory=`pwd`
	   dir_listing $directory
	   ;;
        *) error "Invalid parameters. Use --help" 
	   ;;
     esac	
  fi
}

par_EQ2 () {
   case ${arg1} in
    -m) file=${arg2}
	read_textfile $WEDI_RC
	;;
    -l) directory=${arg2}
        dir_listing $directory	
	;;
    -a) directory=`pwd`
	choose_file $directory
	date=$arg2
	;;
    -b) directory=`pwd`
	choose_file $directory
	date=$arg2
	;;
     *) error "Invalid parameters. Use --help" 
	 ;;
   esac
}

par_EQ3 () {
   case ${arg1} in
    -a) directory=$arg3
	choose_file $directory
	;;
    -b) directory=$arg3
	choose_file $directory
	;;
     *) error "Invalid parameters. Use --help" 
 	;;
   esac
   date=$arg2
}

#---------------CASE----------
case $# in
    1) arg1=${1}
       par_EQ1
	;;
    2) arg1=${1}
       arg2=${2}
       par_EQ2
	;;
    3) arg1=${1}
       arg2=${2}
       arg3=${3}
       par_EQ3
	;;
esac

#--------------------------------------------
[ -d "$file" ] && echo "I'm folder"
[ -f "$file" ] && echo "I'm file"

